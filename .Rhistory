library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
newtrain <- train[, 58:69]
newtrain <- training[, 58:69]
preProcess(newtrain, thresh = 0.9)
preProcess(newtrain, method = "pca", thresh = 0.9)
newtrain2 <- training[, c(1, 58:69)]
newtrain3 <- newtrain[preProcess(newtrain, method = "pca", thresh = 0.9)]
preProcess(newtrain, method = "pca", thresh = 0.9)
burp <- preProcess(newtrain, method = "pca", thresh = 0.9)
burp
burp2 <- predict.preProcess(newtrain, method = "pca", thresh = 0.9)
burp2 <- predict.preProcess(newtrain, method = "pca", thresh = 0.9, newdata = "burp3")
burp3
burp2
preProc <‐ preProcess(train2,method="pca")
preProc <‐ preProcess(newtrain2,method="pca")
preProc
non_pca_model <- train(diagnosis ~ ., data=newtrain2, method="glm")
install.packages("e1071")
non_pca_model <- train(diagnosis ~ ., data=newtrain2, method="glm")
newtest2 <- testing[ , c(1, 58:69)]
non_pca_result <- confusionMatrix(newtest2[, 1], predict(non_pca_model, newtest2[, -1]))
non_pca_result
# perform PCA extraction on the new training and testing sets
pc_training_obj <- preProcess(newtrain2[, -1], method=c('center', 'scale', 'pca'), thresh=0.8)
pc_training_preds <- predict(pc_training_obj, newtrain2[, -1])
pc_testing_preds <- predict(pc_training_obj, newtest2[, -1])
# compute the model with pca predictors
pca_model <- train(newtrain2$diagnosis ~ ., data=pc_training_preds, method="glm")
# apply the PCA model on the testing set
pca_result <- confusionMatrix(newtest2[, 1], predict(pca_model, pc_testing_preds))
pca_result
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProcess(newtrain, method = "pca", thresh = 0.8)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
head(training, n=1)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
head(traing, n=1)
head(training, n=1)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
MyData <- segmentationOriginal
inTrain <‐ createDataPartition(y=MyData$Case,
p=0.7, list=FALSE)
training <‐ MyData[inTrain,]
testing <‐ MyData[‐inTrain,]
set.seed(125)
modFit <‐ train(Cases ~ .,method="rpart",data=training)
print(modFit$finalModel)
modFit <‐ train(Case ~ .,method="rpart",data=training)
print(modFit$finalModel)
unique(MyData$Case)
unique(segmentationOriginal$Case)
modFit
modFit$results
modFit$pred
modFit$coefnames
modFit$finalModel
unique(MyData$Class)
inTrain <‐ createDataPartition(y=MyData$Case,
p=0.7, list=FALSE)
training <‐ MyData[inTrain,]
testing <‐ MyData[‐inTrain,]
set.seed(125)
modFit <‐ train(Class ~ .,method="rpart",data=training)
print(modFit$finalModel)
inTrain <‐ createDataPartition(y=MyData$Class,
p=0.7, list=FALSE)
training <‐ MyData[inTrain,]
testing <‐ MyData[‐inTrain,]
set.seed(125)
modFit <‐ train(Class ~ .,method="rpart",data=training)
print(modFit$finalModel)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
inTrain <‐ createDataPartition(y=MyData$Case,
p=0.7, list=FALSE)
training <‐ MyData[inTrain,]
testing <‐ MyData[‐inTrain,]
set.seed(125)
modFit <‐ train(Class ~ .,method="rpart",data=training)
library(caret)
library(rattle)
inTrain <‐ createDataPartition(y=MyData$Case,
p=0.7, list=FALSE)
training <‐ MyData[inTrain,]
testing <‐ MyData[‐inTrain,]
set.seed(125)
modFit <‐ train(Class ~ .,method="rpart",data=training)
library(caret)
library(rattle)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
MyData <- segmentationOriginal
inTrain <‐ createDataPartition(y=MyData$Case,
p=0.7, list=FALSE)
training <‐ MyData[inTrain,]
testing <‐ MyData[‐inTrain,]
set.seed(125)
modFit <‐ train(Class ~ .,method="rpart",data=training)
print(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
installed.packages()
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
print(modFit$finalModel)
MyData <- segmentationOriginal
inTrain <‐ createDataPartition(y=MyData$Case,
p=0.7, list=FALSE)
training <‐ MyData[inTrain,]
testing <‐ MyData[‐inTrain,]
set.seed(125)
modFit <‐ train(Class ~ .,method="rpart",data=training)
print(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
modFit2 <- train(Area~., method = "rpart", data = olive)
summary(olive)
newdata = as.data.frame(t(colMeans(olive)))
modFit3 <- train(Area~., method = "rpart", data = newdata)
head(newdata)
modFit2 <- train(Area~., method = "rpart", data = olive)
library(pgmm)
data(olive)
olive = olive[,-1]
modFit2 <- train(Area~., method = "rpart", data = olive)
fancyRpartPlot(modFit2$finalModel)
install.packages("tree")
library(tree)
tree1 <- tree(olive$Area ~ ., data = olive)
predict(tree1, newdata)
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
tree1 <- tree(olive$Area ~ ., data = olive)
predict(tree1, newdata)
tree(olive$Area ~ ., data = newdata)
library(pgmm)
data(olive)
olive = olive[,-1]
model<-train(Area ~ ., data=olive, method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
head(train)
head(trainSA)
model <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, family="binomial")
model
model$residuals
model$fitted.values
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missclass(trainSA$chd, model$fitted.values)
missClass(trainSA$chd, model$fitted.values)
missClass(testSA$chd, model$fitted.values)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, family="binomial")
predictionTrain <- predict(model, trainSA, type="response")
predictionTest <- predict(model, testSA, type="response")
plot(model)
missClass(trainSA$chd, predictionTrain)
missClass(testSA$chd, predictionTest)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, family="binomial")
predictionTrain <- predict(model, trainSA, type="response")
predictionTest <- predict(model, testSA, type="response")
plot(model)
missClass(trainSA$chd, predictionTrain)
missClass(testSA$chd, predictionTest)
model <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, family="binomial")
model2 <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=testSA, family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, model$fitted.values)
missClass(testSA$chd, model2$fitted.values)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, family="binomial")
model2 <- glm(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=testSA, family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, model$fitted.values)
missClass(testSA$chd, model2$fitted.values)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
train <- vowel.train
test  <- vowel.test
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
train <- vowel.train
test  <- vowel.test
train$y <- factor(train$y)
test$y  <- factor(test$y)
set.seed(33833)
modFit <‐ train(y~ .,data=train,method="rf",prox=TRUE)
modFit <‐ train(y~ .,data=train,method="rf",prox=TRUE)
modFit
varImp(modFit)
data(vowel.train)
data(vowel.test)
train <- vowel.train
test  <- vowel.test
train$y <- factor(train$y)
test$y  <- factor(test$y)
set.seed(33833)
modFit <‐ train(y~ .,data=train,method="rf",prox=TRUE)
modFit
varImp(modFit)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfmodel <- train(diagnosis~., data=training, method="rf")
gbmmodel <- train(diagnosis~., data=training, method="gbm")
ldamodel <- train(diagnosis~., data=training, method="lda")
pred1 <- prediction(rfmodel, testing)
pred2 <- predicition(gbmmodel, testing)
pred3 <- predicition(ldamodel, testing)
predDF <‐ data.frame(pred1, pred2, pred3, diagnosis=testing$diagnosis)
combModFit <‐ train(diagnosis ~.,method="rf",data=predDF)
combPred <‐ predict(combModFit,predDF)
pred1 <- predict(rfmodel, testing)
pred2 <- predict(gbmmodel, testing)
pred3 <- predict(ldamodel, testing)
predDF <‐ data.frame(pred1, pred2, pred3, diagnosis=testing$diagnosis)
combModFit <‐ train(diagnosis ~.,method="rf",data=predDF)
combPred <‐ predict(combModFit,predDF)
confusionMatrix(pred1, testing$diagnosis)$overall[1]
confusionMatrix(pred2, testing$diagnosis)$overall[1]
confusionMatrix(pred3, testing$diagnosis)$overall[1]
confusionMatrix(combPred, testing$diagnosis)$overall[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
head(training)
model1 <- train(CompressiveStrength, method = "lasso", data=training)
model1 <- train(CompressiveStrength, method = "lasso", data=training)
model1 <- train(CompressiveStrength, method = "lasso", data=training)
model1 <- train(CompressiveStrength, data=training, method = "lasso")
model1 <- train(CompressiveStrength~., data=training, method = "lasso")
plot.enet(model1, "penalty")
plot.enet(model1$finalModel, "penalty")
plot.enet(model1$finalModel, "penalty", use.color = TRUE)
library(forecast)
install.packages("forecast")
library(forecast)
model1 <- bats(tstrain)
library(lubridate)
library(forecast)
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
model1 <- bats(tstrain)
library(lubridate)
library(forecast)
dat = read.csv("~/Desktop/gaData.csv")
wd()
getwd()
dat = read.csv("~/gaData.csv")
dat = read.csv("~/Desktop/gaData.csv")
dat = read.csv("C:/Users/SAMSUNG/Desktop/data science/My directorygaData.csv")
dat = read.csv("C:/Users/SAMSUNG/Desktop/data science/My directory/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
model1 <- bats(tstrain)
model1 <- bats(tstrain)
fcast <- forecast(model1, level = 0.95)
fcast <- forecast(model1, level = 95)
accuracy(f = fcast, x = training$visitsTumblr)
fcast <- forecast(model1, level = 95, h=dim(testing)[1])
sum(fcast$lower < testing$visitsTumblr & testing$visitsTumblr < fcast$upper) /
dim(testing)[1]
h
dim(testing)[1]
nrow(testing)
install.packages("e1071")
install.packages("e1071")
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
model1 <- svm(CompressiveStrength~., data= training)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
model1 <- svm(CompressiveStrength~., data= training)
pred1 <- predict(model1, testing$CompressiveStrength)
pred1 <- predict(model1, testing)
accuracy(pred1)
confusionMatrix(testing$CompressiveStrength, pred1)$overall['Accuracy']
library(forecast)
accuracy(pred1)
install.packages("hydroGOF")
head(pred1)
library(hydroGOF)
rmse(pred1, testing$CompressiveStrength)
set.seed(3523)
library(AppliedPredictiveModeling)
library(e1071)
library(caret)
library(hydroGOF)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
model1 <- svm(CompressiveStrength~., data= training)
pred1 <- predict(model1, testing)
rmse(pred1, testing$CompressiveStrength)
getwd()
blurp <- getwd()
blurp
mywd <- getwd()
training <- read.csv("mywd/pml-training.csv")
training <- read.csv("getwd()/pml-training.csv")
training <- read.csv("Users/SAMSUNG/Desktop/data science/My directory/pml-training.csv")
training <- read.csv("Users/SAMSUNG/Desktop/data science/My directory/pml-training")
training <- read.csv("Users/SAMSUNG/Desktop/data science/My directory/pml-training.csv")
training <- read.csv("C:/Users/SAMSUNG/Desktop/data science/My directory/pml-training.csv")
testing  <- read.csv("C:/Users/SAMSUNG/Desktop/data science/My directory/pml-testing.csv")
head(training)
library(caret)
model1 <- train(classe~., data=training, method= "treebag")
library(caret)
training <- read.csv("C:/Users/SAMSUNG/Desktop/data science/My directory/pml-training.csv")
testing  <- read.csv("C:/Users/SAMSUNG/Desktop/data science/My directory/pml-testing.csv")
plot(training$classe)
hist(training$classe)
summary(training$classe)
class(training$classe)
model1 <- train(classe~., data=training, method= "treebag")
install.packages('shiny')
library(shiny)
getwd()
setwd("C:/Users/SAMSUNG/Desktop/data science/My directory/BMI shiny project")
getwd()
shiny::runApp()
shiny::runApp()
BMI <- function(height, weight) weight/(height/100)^2
BMI(185, 70)
BMIdesc <- function(height, weight)
if (weight/(height/100)^2 < 18.5) { print "Underweight"}
else if ((18.5 <weight/(height/100)^2 < 25)) {print "Normal"}
else {print "overweight"}
BMIdesc <- function(height, weight)
if (weight/(height/100)^2 < 18.5) { print ("Underweight")}
else if ((18.5 <weight/(height/100)^2 < 25)) {print ("Normal")}
else {print ("overweight")}
BMIdesc <- function(height, weight)
if (weight/(height/100)^2 < 18.5) { print("Underweight")
} else if ((18.5 <weight/(height/100)^2 < 25)) {print("Normal")
} else print ("Overweight")
BMIdesc <- function(height, weight)
if ((weight/(height/100)^2) < 18.5) { print("Underweight")
} else if (18.5 < (weight/(height/100)^2) < 25) {print("Normal")
} else print ("Overweight")
BMIdesc <- function(height, weight)
if (weight/(height/100)^2 < 18.5) print("Underweight")
BMIdesc(190, 20)
BMIdesc(190, 120)
BMIdesc <- function(height, weight)
if (18.5 < weight/(height/100^2) < 25) print("Normal")
BMIdesc <- function(height, weight)
if (weight/(height/100^2 > 18.5 ORweight/(height/100^2< 25) print("Normal")
BMIdesc <- function(height, weight)
if (weight/(height/100^2 > 18.5 OR weight/(height/100^2< 25) print("Normal")
BMIdesc <- function(height, weight)
if (weight/(height/100^2 > 18.5) OR (weight/height/100^2< 25) print("Normal")
BMIdesc <- function(height, weight)
if (weight/(height/100^2 > 18.5 | weight/height/100^2< 25) print("Normal")
BMIdesc <- function(height, weight)
if (weight/(height/100^2 > 18.5 | weight/height/100^2 < 25) print("Normal")
BMIdesc <- function(height, weight)
if (weight/(height/100)^2 > 18.5 | weight/(height/100)^2 < 25) print("Normal")
BMIdesc(185, 70)
BMIdesc <- function(height, weight)
if (weight/(height/100)^2 < 18.5) {print("Underweight")}
else if (weight/(height/100)^2 > 18.5 | weight/(height/100)^2 < 25) {print("Normal")}
else print ("Overweight")
else print {("Overweight")}
BMIdesc <- function(height, weight)
if (weight/(height/100)^2 < 18.5) {print("Underweight")}
else if (weight/(height/100)^2 > 18.5 | weight/(height/100)^2 < 25) {print("Normal")}
else print {("Overweight")}
BMIdesc <- function(height, weight)
if (weight/(height/100)^2 < 18.5) {print("Underweight")}
else if (weight/(height/100)^2 > 18.5 | weight/(height/100)^2 < 25) {print("Normal")}
else {print ("Overweight")}
BMIdesc <- function(height, weight)
if (weight/(height/100)^2 < 18.5) {print("Underweight")
} else if (weight/(height/100)^2 > 18.5 | weight/(height/100)^2 < 25) {print("Normal")
} else {print ("Overweight")
}
shiny::runApp()
shiny::runApp()
BMIdesc <- function(height, weight)
if (weight/(height/100)^2 < 18.5) {print("Underweight")
} else if (weight/(height/100)^2 > 18.5 | weight/(height/100)^2 < 25) {print("Normal")
} else {print ("Overweight")
}
BMIdesc(170, 130)
shiny::runApp()
shiny::runApp()
